//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.Web.LibraryManager.Tools {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.Web.LibraryManager.Tools.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string CacheCommandDesc {
            get {
                return ResourceManager.GetString("CacheCommandDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deletes all library files defined in libman.json from the project.
        /// </summary>
        internal static string CleanCommandDesc {
            get {
                return ResourceManager.GetString("CleanCommandDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     Deletes any folders that become empty after this operation. .
        /// </summary>
        internal static string CleanCommandRemarks {
            get {
                return ResourceManager.GetString("CleanCommandRemarks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path, relative to the current directory, where library files should be installed if no destination is defined for a given library..
        /// </summary>
        internal static string DefaultDestinationOptionDesc {
            get {
                return ResourceManager.GetString("DefaultDestinationOptionDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provider to use if no provider is defined for a given library. (eg. “cdnjs”, “filesystem”).
        /// </summary>
        internal static string DefaultProviderOptionDesc {
            get {
                return ResourceManager.GetString("DefaultProviderOptionDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Location to install the library (if not specified, the default destination location will be used).
        /// </summary>
        internal static string DestinationOptionDesc {
            get {
                return ResourceManager.GetString("DestinationOptionDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Examples:.
        /// </summary>
        internal static string ExamplesHeader {
            get {
                return ResourceManager.GetString("ExamplesHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The files from the specified library to install (if not specified, all files from the library will be installed).
        /// </summary>
        internal static string FilesOptionDesc {
            get {
                return ResourceManager.GetString("FilesOptionDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Create a new libman.json.
        /// </summary>
        internal static string InitCommandDesc {
            get {
                return ResourceManager.GetString("InitCommandDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Add a library definition to the LibMan.json file, and download the library to the specified location.
        /// </summary>
        internal static string InstallCommandDesc {
            get {
                return ResourceManager.GetString("InstallCommandDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     libman install jquery@3.2.1 
        ///    libman install jquery --provider cdnjs --destination wwwroot\scripts\jquery --files jquery.min.js 
        ///    libman install myCalendar --provider filesystem --files calendar.js --files calendar.css.
        /// </summary>
        internal static string InstallCommandExamples {
            get {
                return ResourceManager.GetString("InstallCommandExamples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Library to install.
        /// </summary>
        internal static string InstallCommandLibraryIdArgumentDesc {
            get {
                return ResourceManager.GetString("InstallCommandLibraryIdArgumentDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     CDNJS libraries have a library ID format of “&lt;libraryName&gt;@&lt;libraryVersion&gt;”. 
        ///    For CDNJS libraries, if no version is specified in the library ID, the highest version available is used..
        /// </summary>
        internal static string InstallCommandProviderSpecificLogic {
            get {
                return ResourceManager.GetString("InstallCommandProviderSpecificLogic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     Initializes a libman.json if one does not exist. 
        ///    If no default provider exists, --provider option is required.
        ///    If no default destination exists, --destination option is required. 
        ///    If no files are specified, the entire library is included..
        /// </summary>
        internal static string InstallCommandRemarks {
            get {
                return ResourceManager.GetString("InstallCommandRemarks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid arguments for command: {0}.
        /// </summary>
        internal static string InvalidArgumentsMessage {
            get {
                return ResourceManager.GetString("InvalidArgumentsMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Library Manager.
        /// </summary>
        internal static string LibmanCommandDesc {
            get {
                return ResourceManager.GetString("LibmanCommandDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provider to use (if not specified, the default provider will be used).
        /// </summary>
        internal static string ProviderOptionDesc {
            get {
                return ResourceManager.GetString("ProviderOptionDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provider-specific logic:.
        /// </summary>
        internal static string ProviderSpecificLogicHeader {
            get {
                return ResourceManager.GetString("ProviderSpecificLogicHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remarks:.
        /// </summary>
        internal static string RemarksHeader {
            get {
                return ResourceManager.GetString("RemarksHeader", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Downloads all files from provider and saves them to specified destination..
        /// </summary>
        internal static string RestoreCommandDesc {
            get {
                return ResourceManager.GetString("RestoreCommandDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     Error if no libman.json in current folder. 
        ///    If a library specifies a provider, it will override the defaultProvider.  
        ///    If a library specifies a destination, it will override the defaultDestination..
        /// </summary>
        internal static string RestoreCommandRemarks {
            get {
                return ResourceManager.GetString("RestoreCommandRemarks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deletes all files for the specified library from their specified destination, then removess the specified library definition from libman.json.
        /// </summary>
        internal static string UnInstallCommandDesc {
            get {
                return ResourceManager.GetString("UnInstallCommandDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     libman uninstall jquery 
        ///    libman uninstall jquery --provider cdnjs 
        ///    libman uninstall myCalendar –p filesystem.
        /// </summary>
        internal static string UnInstallCommandExamples {
            get {
                return ResourceManager.GetString("UnInstallCommandExamples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Library to uninstall.
        /// </summary>
        internal static string UninstallCommandLibraryIdArgumentDesc {
            get {
                return ResourceManager.GetString("UninstallCommandLibraryIdArgumentDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The provider of the library to be uninstalled.
        /// </summary>
        internal static string UninstallCommandProviderOptionDesc {
            get {
                return ResourceManager.GetString("UninstallCommandProviderOptionDesc", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     CDNJS libraries have a library ID format of “&lt;libraryName&gt;@&lt;libraryVersion&gt;”. 
        ///    If no version is specified in the library ID, this command will act on any library with libraryName matching the given libraryId..
        /// </summary>
        internal static string UnInstallCommandProviderSpecificLogic {
            get {
                return ResourceManager.GetString("UnInstallCommandProviderSpecificLogic", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to     Error if not exactly one library found. 
        ///    Use the provider attribute to disambiguate libraries of the same name from different providers in the same project. 
        ///    If there is only one library by the given name in the current project, provider attribute can be omitted..
        /// </summary>
        internal static string UnInstallCommandRemarks {
            get {
                return ResourceManager.GetString("UnInstallCommandRemarks", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Set the verbosity of output (eg. &quot;normal&quot;, &quot;detailed&quot;, &quot;quiet&quot;).
        /// </summary>
        internal static string VerbosityOptionDesc {
            get {
                return ResourceManager.GetString("VerbosityOptionDesc", resourceCulture);
            }
        }
    }
}
