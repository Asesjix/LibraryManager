<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CacheCommandDesc" xml:space="preserve">
    <value />
  </data>
  <data name="CleanCommandDesc" xml:space="preserve">
    <value>Deletes all library files defined in libman.json from the project</value>
  </data>
  <data name="CleanCommandRemarks" xml:space="preserve">
    <value>    Deletes any folders that become empty after this operation. </value>
  </data>
  <data name="DefaultDestinationOptionDesc" xml:space="preserve">
    <value>The path, relative to the current directory, where library files should be installed if no destination is defined for a given library.</value>
  </data>
  <data name="DefaultProviderOptionDesc" xml:space="preserve">
    <value>The provider to use if no provider is defined for a given library. (eg. “cdnjs”, “filesystem”)</value>
  </data>
  <data name="DestinationOptionDesc" xml:space="preserve">
    <value>Location to install the library (if not specified, the default destination location will be used)</value>
  </data>
  <data name="ExamplesHeader" xml:space="preserve">
    <value>Examples:</value>
  </data>
  <data name="FilesOptionDesc" xml:space="preserve">
    <value>The files from the specified library to install (if not specified, all files from the library will be installed)</value>
  </data>
  <data name="InitCommandDesc" xml:space="preserve">
    <value>Create a new libman.json</value>
  </data>
  <data name="InstallCommandDesc" xml:space="preserve">
    <value>Add a library definition to the LibMan.json file, and download the library to the specified location</value>
  </data>
  <data name="InstallCommandExamples" xml:space="preserve">
    <value>    libman install jquery@3.2.1 
    libman install jquery --provider cdnjs --destination wwwroot\scripts\jquery --files jquery.min.js 
    libman install myCalendar --provider filesystem --files calendar.js --files calendar.css</value>
  </data>
  <data name="InstallCommandLibraryIdArgumentDesc" xml:space="preserve">
    <value>Library to install</value>
  </data>
  <data name="InstallCommandProviderSpecificLogic" xml:space="preserve">
    <value>    CDNJS libraries have a library ID format of “&lt;libraryName&gt;@&lt;libraryVersion&gt;”. 
    For CDNJS libraries, if no version is specified in the library ID, the highest version available is used.</value>
  </data>
  <data name="InstallCommandRemarks" xml:space="preserve">
    <value>    Initializes a libman.json if one does not exist. 
    If no default provider exists, --provider option is required.
    If no default destination exists, --destination option is required. 
    If no files are specified, the entire library is included.</value>
  </data>
  <data name="InvalidArgumentsMessage" xml:space="preserve">
    <value>Invalid arguments for command: {0}</value>
  </data>
  <data name="LibmanCommandDesc" xml:space="preserve">
    <value>Library Manager</value>
  </data>
  <data name="ProviderOptionDesc" xml:space="preserve">
    <value>Provider to use (if not specified, the default provider will be used)</value>
  </data>
  <data name="ProviderSpecificLogicHeader" xml:space="preserve">
    <value>Provider-specific logic:</value>
  </data>
  <data name="RemarksHeader" xml:space="preserve">
    <value>Remarks:</value>
  </data>
  <data name="RestoreCommandDesc" xml:space="preserve">
    <value>Downloads all files from provider and saves them to specified destination.</value>
  </data>
  <data name="RestoreCommandRemarks" xml:space="preserve">
    <value>    Error if no libman.json in current folder. 
    If a library specifies a provider, it will override the defaultProvider.  
    If a library specifies a destination, it will override the defaultDestination.</value>
  </data>
  <data name="UnInstallCommandDesc" xml:space="preserve">
    <value>Deletes all files for the specified library from their specified destination, then removess the specified library definition from libman.json</value>
  </data>
  <data name="UnInstallCommandExamples" xml:space="preserve">
    <value>    libman uninstall jquery 
    libman uninstall jquery --provider cdnjs 
    libman uninstall myCalendar –p filesystem</value>
  </data>
  <data name="UninstallCommandLibraryIdArgumentDesc" xml:space="preserve">
    <value>Library to uninstall</value>
  </data>
  <data name="UninstallCommandProviderOptionDesc" xml:space="preserve">
    <value>The provider of the library to be uninstalled</value>
  </data>
  <data name="UnInstallCommandProviderSpecificLogic" xml:space="preserve">
    <value>    CDNJS libraries have a library ID format of “&lt;libraryName&gt;@&lt;libraryVersion&gt;”. 
    If no version is specified in the library ID, this command will act on any library with libraryName matching the given libraryId.</value>
  </data>
  <data name="UnInstallCommandRemarks" xml:space="preserve">
    <value>    Error if not exactly one library found. 
    Use the provider attribute to disambiguate libraries of the same name from different providers in the same project. 
    If there is only one library by the given name in the current project, provider attribute can be omitted.</value>
  </data>
  <data name="VerbosityOptionDesc" xml:space="preserve">
    <value>Set the verbosity of output (eg. "normal", "detailed", "quiet")</value>
  </data>
</root>